package Seminar2.CW.ShopTest;

/*
1. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏
—Ç–æ–≤–∞—Ä–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å—á–∏—Ç–∞–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
2. –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
—ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å—á–∏—Ç–∞–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
3. –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑
–∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
–∫–æ—Ä–∑–∏–Ω—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –º–µ–Ω—è–µ—Ç—Å—è
4. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
—Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ —á–∏—Å–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
5. –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è
–ø—Ä–æ–¥—É–∫—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ë–æ–ª—å—à–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç
–∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ–ª—å–∑—è, –æ–Ω –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–∫–µ
*/
import Seminar2.CW.Shop.Cart;
import Seminar2.CW.Shop.Product;
import Seminar2.CW.Shop.Shop;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class CartTest {
    private Shop shop;
    private Cart cart;
    private Product product1;
    private Product product2;

    @BeforeEach
    public void setUp() {
        shop = new Shop();
        cart = new Cart();
        product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);
        product2 = new Product(2, "–¢–æ–≤–∞—Ä 2", 300.0, 1);
    }

// 1.
    @Test
    public void testCalculateTotalWithMultipleProducts() {
// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Product product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);
        Product product2 = new Product(2, "–¢–æ–≤–∞—Ä 2", 300.0, 1);
        Product product3 = new Product(3, "–¢–æ–≤–∞—Ä 3", 200.0, 1);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product1);
        cart.addProduct(product2);
        cart.addProduct(product3);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        double expectedTotalPrice = 1000.0; // 500 + 300 + 200
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    }

    @Test
    public void testCalculateTotalWithEmptyCart() {
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞–≤–Ω–∞ 0.0
        double expectedTotalPrice = 0.0;
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01);
    }

    @Test
    public void testCalculateTotalWithSingleProduct() {
// –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
        Product product = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Å –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º —Ä–∞–≤–Ω–∞ —Ü–µ–Ω–µ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        double expectedTotalPrice = 500.0;
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01);
    }

// 2.
    @Test
    public void testCalculateTotalWithMultipleTheSameProducts() {
// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≤ —Ç.—á. –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        Product product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);
        Product product2 = new Product(2, "–¢–æ–≤–∞—Ä 1", 500.0, 1);
        Product product3 = new Product(3, "–¢–æ–≤–∞—Ä 3", 200.0, 1);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product1);
        cart.addProduct(product2);
        cart.addProduct(product3);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        double expectedTotalPrice = 1200.0; // 500 + 500 + 200
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    }

// 3.
    @Test
    public void testRecalculateTotalAfterRemovingProduct() {
// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product1);
        cart.addProduct(product2);

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
        double initialTotalPrice = cart.calculateTotal();

// –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart.removeProduct(product1);

// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        double updatedTotalPrice = cart.calculateTotal();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        assertNotEquals(initialTotalPrice, updatedTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    }

// 4.
    @Test
    public void TestProductRemoveFromShopWhenAddedToCart() {
        // –î–æ–±–∞–≤–ª—è–µ–º 2 —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
        shop.addProduct(product1);
        shop.addProduct(product2);
        // –î–æ–±–∞–≤–ª—è–µ–º 1 —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product1);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ 1
        int expectedQuantityInShop = 1; // 2 - 1
        shop.decreaseProductQuantity(product1,1);
        int actualQuantityInShop = shop.getProducts().size();
        assertEquals(expectedQuantityInShop, actualQuantityInShop);
    }

// 5.
    @Test
    public void testTask5() {
        cart.addProduct(product1);
        cart.addProduct(product2);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
        assertTrue(cart.containsProduct(product1));
        assertTrue(cart.containsProduct(product2));

// –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart.removeProduct(product1);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª—è–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
        assertFalse(cart.containsProduct(product1));
        assertTrue(cart.containsProduct(product2));
    }


    @Test
    public void testTask5_1() {
// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Product product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 2);
        Product product2 = new Product(2, "–¢–æ–≤–∞—Ä 2", 300.0, 1);
        Product product3 = new Product(3, "–¢–æ–≤–∞—Ä 3", 200.0, 1);
// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω
        shop.addProduct(product1);
        shop.addProduct(product2);
        shop.addProduct(product3);

        cart.addProduct(product1);
//        int quantityCard = product1.getQuantity();
//        int quantityShop = product1.getQuantity();
//        System.out.println(quantityCard);
//        System.out.println(quantityShop);
        List<Product> products = shop.getProducts();
        System.out.println(products);

//// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
//        cart.addProduct(product1);
//        cart.addProduct(product2);
//        cart.addProduct(product3);
//
//// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
//        double expectedTotalPrice = 1000.0; // 500 + 300 + 200
//        double actualTotalPrice = cart.calculateTotal();
//        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    }
}
